// ==== Structures =====================================================================================================

typedef struct // Header
{
	char signature[8]; // BFEVFL
	uint version <format=hex, read=VersionRead>;
	enum <ushort> ByteOrder
	{
		BO_LittleEndian = 0xFEFF,
		BO_BigEndian = 0xFFFE
	} byteOrder <format=hex>;
	byte alignment <format=hex>;
	byte targetOffset;
 	uint FileNameOffsetToString;
	ushort flag;
	ushort blockOffset;
	uint RelocationTableOffset;
	uint BFEVFLSize;
	uint64 Unk;
	uint64 Unk;
	uint64 EVFLDictOffset;
	uint64 Unk;
	uint64 UnkDictOffset;
	uint64 EVFLOffset;


	if (RelocationTableOffset)
	{
		FSeek(RelocationTableOffset);
		RELT relocationTable;
	}
	if (EVFLDictOffset)
	{
		FSeek(EVFLDictOffset);
		Dict EVFLDict(DT_NONE);
	}
	if (UnkDictOffset) //Blank for some reason????
	{
		FSeek(UnkDictOffset);
		Dict UnkDictOffset(DT_NONE);
	}
	if (EVFLOffset)
	{
		FSeek(EVFLOffset);
		EVFL evfl;
	}

} Header <bgcolor=0xCDFFFF>;

// ---- Offsets ----

typedef struct // Offset
{
	local uint origin <format=hex> = FTell();
	int value;
	if (value)
	{
		local uint target <format=hex> = origin + value;
	}
} Offset <read=OffsetRead>;

typedef struct // NameOffset
{
	local uint origin  = FTell(); 
	uint64 value;
	if (value)
	{
		FSeek(value);
		ushort nameLength;
		string name;
		FAlign(2);
		FSeek(origin + sizeof(uint64));  //Loop back after getting name offset
	}
} NameOffset <read=NameOffsetRead>;


// ---- Dicts ----

typedef struct(DictType type) // Dict
{
    char Magic[4];
	uint numNodes; // First element is root entry.
	if (type == DT_STRING)
	{
		DictNodeName nodes[numNodes + 1] <optimize=false>;
	}
	else
	{
		DictNode nodes[numNodes + 1] <optimize=false>;
		local uint pos <hidden=true> = FTell();
		// Read the entries.
		local int i <hidden=true>;
		for (i = 1; i <= numNodes; i++)
		{
	
		}
		FSeek(pos); // Seek back to prevent struct from ending in front of position.
	}
} Dict <fgcolor=0x000099, read=DictRead>;

typedef struct // DictNode
{
	uint ref <format=hex>;
	ushort idxLeft;
	ushort idxRight;
	NameOffset ofsKey;
} DictNode <read=DictNodeRead>;

typedef struct // DictNodeName
{
	uint ref <format=hex>;
	ushort idxLeft;
	ushort idxRight;
	NameOffset ofsKey;
} DictNodeName <read=DictNodeNameRead>;

// ---- Texture References ----

typedef struct // TextureRef
{
	NameOffset ofsName;
	Offset ofsTexture; // FTEX pointer
} TextureRef <bgcolor=0xBBA1C8, read=TextureRefRead>;

// ----Relocation ----

typedef struct // Relocation Table
{
	char relt[4];
	uint Position; //pos of relocation table
	int SectionCount;
	uint padding <fgcolor=0x808080, hidden=true>;     

	RELTSection RLTSection[SectionCount];
	
    RELTEntry RLTEntry[RLTSection.entryCount];

} RELT <bgcolor=0xBBA1C8>;

typedef struct // RelocationTableSection
{
	union
	{
	    uint64 padding <fgcolor=0x808080, hidden=true>;                                                                                                          
		uint64 Ptr;
	} Pointer;

    uint position;
    uint size;
    int entryIndex;
    int entryCount;
		
	
    local uint pos <hidden=true> = FTell();

	
	FSeek(pos);

	
} RELTSection<bgcolor=0xDFDDEF>;

typedef struct // RelocationTableEntry
{

    uint position;
    ushort structCount;
    ubyte offsetCount;
    ubyte paddingCount;
	
} RELTEntry<bgcolor=0xDFDDEF>;





// ---- Animation Curves ----

typedef struct // AnimCurve
{
	enum <ushort> AnimCurveFrameType
	{
		ACFT_Single,
		ACFT_Decimal10x5,
		ACFT_Byte
	} flgFrameType : 2;
	enum <ushort> AnimCurveKeyType
	{
		ACKT_Single,
		ACKT_Int16,
		ACKT_SByte
	} flgKeyType : 2;
	enum <ushort> AnimCurveType
	{
		ACT_Cubic,
		ACT_Linear,
		ACT_BakedFloat,
		ACT_StepInt = 4,
		ACT_BakedInt,
		ACT_StepBool,
		ACT_BakedBool
	} flgCurveType : 3;
	ushort numKey;
	uint animDataOffset;
	float startFrame;
	float endFrame;
	float scale;
	union
	{
		int value;
		float value;
	} offset;
	if (file.version >= 0x03040000)
	{
		float delta;
	}
	Offset ofsFrameList;
	Offset ofsKeyList;
	local uint pos <hidden=true> = FTell();
	// Read the frames.
	FSeek(ofsFrameList.target);
	switch (flgFrameType)
	{
		case ACFT_Single: float frames[numKey]; break;
		case ACFT_Decimal10x5: ushort frames[numKey]; break; // TODO: Convert to 16-bit fixed point
		case ACFT_Byte: ubyte frames[numKey]; break;
	}
	FAlign(4);
	// Read the keys.
	FSeek(ofsKeyList.target);
	local uint keyElementCount <hidden=true>;
	switch (flgCurveType)
	{
		case ACT_Cubic: keyElementCount = 4; break;
		case ACT_Linear: keyElementCount = 2; break;
		default: keyElementCount = 1; break;
	}
	keyElementCount *= numKey;
	switch (flgKeyType)
	{
		case ACKT_Single: float data[keyElementCount] <bgcolor=0xC8A1A1, optimize=false>; break;
		case ACKT_Int16: short data[keyElementCount] <bgcolor=0xC8A1A1, optimize=false>; break;
		case ACKT_SByte: byte data[keyElementCount] <bgcolor=0xC8A1A1, optimize=false>; break;
	}
	FAlign(4);
	FSeek(pos); // Seek back to header end.	
} AnimCurve <bgcolor=0xD9AEAE>;

// ---- User Data ----

typedef struct // UserData
{
	NameOffset ofsName;
	ushort count;
	enum <ubyte> UserDataType
	{
		UDT_Int32,
		UDT_Single,
		UDT_String,
		UDT_WString,
		UDT_Byte
	} type;
	ubyte padding <fgcolor=0x808080, hidden=true>;
	// Read the values.
	switch (type)
	{
		case UDT_Int32: int value[count] <optimize=false>; break;
		case UDT_Single: float value[count] <optimize=false>; break;
		case UDT_String: NameOffset value[count] <optimize=false>; break;
		case UDT_Byte: ubyte value[count] <optimize=false>; break;
	}
} UserData <fgcolor=0x009900, read=UserDataRead>;

// ---- Shader Parameter Types ----

enum <uint> TexSrtMode
{
	TSM_Maya,
	TSM_3dsMax,
	TSM_Softimage
};

typedef struct // Srt2D
{
	Vector2F scaling;
	float rotation;
	Vector2F translation;
} Srt2D;

typedef struct // Srt3D
{
	Vector3F scaling;
	Vector3F rotation;
	Vector3F translation;
} Srt3D;

typedef struct // TexSrt
{
	TexSrtMode mode;
	Vector2F scaling;
	float rotation;
	Vector2F translation;
} TexSrt;

typedef struct // TexSrtEx
{
	TexSrtMode mode;
	Vector2F scaling;
	float rotation;
	Vector2F translation;
	uint matrixPointer;
} TexSrtEx;

// ==== Template Methods ===============================================================================================

string DictRead(Dict &dict)
{
	string s;
	SPrintf(s, "%d nodes", dict.numNodes);
	return s;
}

string DictNodeNameRead(DictNodeName &dictNodeName)
{
	if (dictNodeName.ofsKey.value)
	{
		string s;
		SPrintf(s, "<\"%s\"> = \"%s\"", dictNodeName.ofsKey.name, dictNodeName.ofsData.name);
		return s;
	}
	else
	{
		return "<root>";
	}
}

string DictNodeRead(DictNode &dictNode)
{
	if (dictNode.ofsKey.value)
	{
		string s;
		SPrintf(s, "<\"%s\">", dictNode.ofsKey.name);
		return s;
	}
	else
	{
		return "<root>";
	}
}

string NameOffsetRead(NameOffset &nameOffset)
{
	string s;
	if (nameOffset.value)
	{
		SPrintf(s, "%d -> %Xh = \"%s\"", nameOffset.value, nameOffset.value, nameOffset.name);
	}
	else
	{
		SPrintf(s, "%d -> N/A", nameOffset.value);
	}
	return s;
}

string OffsetRead(Offset &offset)
{
	string s;
	if (offset.value)
	{
		SPrintf(s, "%d -> %Xh", offset.value, offset.target);
	}
	else
	{
		SPrintf(s, "%d -> N/A", offset.value);
	}
	return s;
}

string TextureRefRead(TextureRef &textureRef)
{
	return textureRef.ofsName.name;
}

string UserDataRead(UserData &userData)
{
	// TODO: Show the values.
	return userData.ofsName.name;
}

string VersionRead(uint version)
{
	string s;
	SPrintf(s, "%Xh (%u.%u.%u.%u)", version,
		version >> 24,
		version >> 16 & 0xFF,
		version >> 8 & 0xFF,
		version & 0xFF);
	return s;
}


